Algoritmo Guloso 1.1

Grafo(Vertices, Arestas), n = Numero de Vertices, a = Maior grau de saida, c = Tamanho do maior caminho entre 2 vertices

Fila fila = ordenacaoTopologica(Vertices)

for(Vertice sorvedouro: Grafo.sorvedouros) {
	sorvedouro.setSetCores.adicionar(Novo setCores(sorvedouro.cor))
}

while(!fila.vazio())	//Para cada Vertice pode executar a vezes(Executa de acordo com o numero de filhos, no maximo n*a vezes)
{
	Vertice v = fila.remover_primeiro()
	v.max = v.setSetCores.getMaior.tamanho()

	//Executa n vezes
	for(Vertice pai: v.pais())	//Executa no maximo a vezes
	{
		for(setCores set: v.setSetCores) {
			pai.setSetCores.adicionar(Novo setCores(set + pai.cor))
		}
	}
}

Complexidade
Tempo: 2n + (4 * n * a) + (n * (a * (2 * c + 1) + 3))

Tamanho: n * c //Cada vertice com uma lista de no maximo c elementos(c = n em um grafo conexo)
